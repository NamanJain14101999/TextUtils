{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","rows","backgroundColor","value","onChange","event","target","newText","toUpperCase","showAlert","toLocaleLowerCase","document","getElementById","select","navigator","clipboard","writeText","newtext","split","join","length","Alert","alert","role","word","lower","toLowerCase","charAt","slice","capatilize","msg","defaultProps","AboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.04ff5f2e.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n// import {Link} from \"react-router-dom\";\r\nexport default function Navbar(props) {\r\n    return (\r\n\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.AboutText}</Link>\r\n                        </li> */}\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode==='dark'?'light':'dark'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className =\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    AboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"set title here \",\r\n    AboutText: \"About\"\r\n}","import React,{useState} from 'react'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\")\r\n\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase!\",\"success\");\r\n    }\r\n    const handleLowClick = ()=>{\r\n        let newText = text.toLocaleLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowercase!\",\"success\");\r\n    }\r\n    const handleClearClick = ()=>{\r\n        let newText = '';\r\n        setText(newText)\r\n        props.showAlert(\"Text cleared!\",\"success\");\r\n    }\r\n    \r\n    const handleCopy = ()=>{\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text copied!\",\"success\");\r\n        \r\n    }\r\n    \r\n    const handleExtraSpaces = ()=>{\r\n        var newtext = text.split(/[ ]+/);\r\n        setText(newtext.join(\" \"))\r\n        props.showAlert(\"Extra spaces removed!\",\"success\");\r\n\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='light'?'#042743':'white'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" style={{backgroundColor: props.mode==='light'?'white':'grey',color: props.mode==='light'?'#042743':'white'}} value={text} onChange={handleOnChange}></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button> \r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>Convert to LowerCase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>remove extra spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='light'?'#042743':'white'}}>\r\n            <h2>Your Text Summary</h2>\r\n            <p>{text.split(\" \").length} words, and {text.length} character</p>\r\n            <p>{text.split(\" \").length * 0.008} mintues to read </p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"enter your text to preview here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capatilize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n       props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong> {capatilize(props.alert.type)}: </strong>\r\n  {props.alert.msg}\r\n  {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n</div>\r\n    )\r\n}\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport {useState}  from 'react'\nimport Alert from './components/Alert';\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n\n  const showAlert = (message , type)=>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(() => {\n        setAlert(null);\n      }, 1000);\n  }\n  const toggleMode = ()=>{\n    if (mode === 'light')\n    {\n      setMode('dark')\n      document.body.style.backgroundColor = '#042743'\n      showAlert(\"Dark Mode has been enabled\", \"success\")\n      document.title = \"TextUtils - Dark Mode\";\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Light Mode has been enabled\", \"success\")\n      document.title = \"TextUtils - Light Mode\";\n    }\n  }\n  return (\n    <>\n    {/* <Router> */}\n\n    <Navbar title=\"Textutils\" mode={mode} toggleMode={toggleMode}/>\n\n    <Alert alert={alert}/>\n\n    <div className=\"container my-3\">\n    {/* <Switch> */}\n          {/* <Route exact  path=\"/about\"> */}\n            {/* <About /> */}\n          {/* </Route> */}\n          {/* <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n          {/* </Route> */}\n        {/* </Switch> */}\n    </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}